#BLOCO CONDA
conda update conda (atualiza o programa gerenciador de pacotes e ambientes)
conda create --name [nome] (cria um ambiente limpo, sem nenhum package)
conda create --name [nome] -c conda-forge python==3.7.7 (cria um ambiente limpo, especificando a versão do python - ver extensões)

# conda tem vários canais de busca de pacotes. A versão mais recente do Jupyterlab (2.1.4) tem que ser buscada no conda-forge
# atraves do argumento -c conda-forge

#BLOCO GIT
conda install -c conda-forge git

#BLOCO JUPYTER
conda install -c conda-forge jupyter #(instala o jupyter e suas dependências)
# para instalar uma versao especifica de um pacote, utilize o argumento '=' com o numero da versao
conda install -c conda-forge jupyterlab=2.1.4

#BLOCO EXTENSIONS
#(necessário para que extensões funcionem no lab)
conda install -c conda-forge nodejs
conda install -c conda-forge jupyter_contrib_nbextensions 

conda install -c conda-forge jupyterlab-git # permite executar os comandos git através do jupyterlab. Obs. precisar ter o git no ambiente
jupyter labextension install @jupyterlab/toc # tabela de conteúdos: permite navegar no notebook pelas células de markdown
jupyter labextension install jupyterlab-favorites  # cria uma janela de pastas favoritas

conda install -c conda-forge xeus-python # necessário para a extensão de debugger
conda install -c conda-forge ptvsd # necessário para a extensão de debugger. Obs. precisa de 3.7< python <3.8
jupyter labextension install @jupyterlab/debugger # extensão para fazer debug de código
conda install -c conda-forge jupyter_conda # permite navegar nos ambientes conda pelo jupyterlab
jupyter labextension install jupyterlab_toastify jupyterlab_conda  # permite navegar nos ambientes conda pelo jupyterlab

# extensao para ativar intellisense (autocomplete de codigo sem usar o tab) - apenas no jupyter notebook
#jupyter nbextension install --py jupyter_tabnine
#jupyter nbextension enable --py jupyter_tabnine
#jupyter serverextension enable --py jupyter_tabnine
#jupyter lab build

#BLOCO FUNDAMENTOS
conda install numpy cython -c conda-forge
conda install scipy pandas -c conda-forge 

#BLOCO STATS&ML
conda install -c conda-forge scikit-learn
conda install -c conda-forge statsmodel
conda install -c conda-forge shap
pip install pmdarima # procurar um pacote equivalente disponível no conda-forge. principal problema de dependencia, cython, nao
# utiliza a ultima versao disponivel no conda-forge

#BLOCO DATAVIZ
conda install -c conda-forge matplotlib seaborn 
#// BOKEH
#// FOLIUM


#BLOCO PLOTLY
conda install -c conda-forge jupyterlab "ipywidgets=7.5"
conda install -c conda-forge plotly=4.8.1
jupyter labextension install jupyterlab-plotly@4.8.1
jupyter labextension install @jupyter-widgets/jupyterlab-manager plotlywidget@4.8.1

#BLOCO FBPROPHET
conda install libpython m2w64-toolchain -c msys2 # dependência pystan
conda install pystan -c conda-forge # dependência fbprophet
pip install fbprophet

#BLOCO CV
#// TESSERACT-OCR
#// OPENCV

#BLOCO NN
conda install -c conda-forge tensorflow keras 
conda install -c conda-forge tensorflow-estimator=2.1.0
conda install -c conda-forge ann_visualizer python-graphviz #no conda o package graphviz instala os binários. no pip é o executável

#BLOCO DATABASES
#// SQL
#// ...

#BLOCO SCRAPPING
#// Selenium
#// BeautifulSoup

#BLOCO PRODUCTION
#// Streamlit

#AUTOML
// FeatureTools
// Pandas Profiling
// Facets

#CRIANDO_API
conda install -c conda-forge flask flask-jsonpify flask-restful

#PROGRAMAS DE SUPORT
#// Tesseract
#// webdriver

--------------------- criando chave ssh -------------------

# Existe um conjunto de programas pre-instalados no windows chamados openssh.
# Para executar comandos do windows no shell do conda, precisamos adicionar a pasta do programa a variavel de ambiente PATH
# Adicionamos valores a variaveis de ambientes executando os passos a seguir: 
# (1) abrir windows explorer; 
# (2) botão direito este computador;
# (3) clique em propriedades;
# (4) configuracoes avançadas do sistema;
# (5) variáveis de ambiente;
# (6)  selecionar PATH em variáveis de ambiente gerais,
# (7) incluir uma linha para %SYSTEMROOT%\System32\OpenSSH\
# E possivel fazer atraves de comandos do terminal (nao mapeado nesse tutorial)
# orientacoes https://help.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent
# Daí executar o comando abaixo no terminal em uso (conda, windows powershell, etc)
ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
# Na sequencia ele pede para definir a pasta da chave. Apenas 'enter' mantem a pasta padrao /c/Users/you/.ssh/id_rsa
# Depois pedirá uma palavra passe (recomendado)
# Nesse momento será necessário iniciar o servidor local do ssh
ssh-agent -s
# Esse comando, em geral, inclui automaticamente as informacoes do servico como variaveis de ambiente. Contudo, no windows
# isso nem sempre e automatico.
# Para incluir as variaveis de ambiente precisa executar os seguintes comandos (ver os dados no comando anterior)
# https://www.rockyourcode.com/ssh-agent-could-not-open-a-connection-to-your-authentication-agent-with-fish-shell/
# http://www.dowdandassociates.com/blog/content/howto-set-an-environment-variable-in-windows-command-line-and-registry/
setx SSH_AUTH_SOCK /tmp/ssh-ywi8y32DoRdt/agent.[numero]
setx SSH_AGENT_PID [numero]
# Toda vez que novas variaveis de ambientes sao adicionadas e necessario reiniciar o terminal
# Por fim vem a ativacao do servico local atraves da associacao da chave ao servico
ssh-add ~/.ssh/id_rsa
# Pedirá a palavre passe cadastrada
# Criada, será necessário copiar o conteudo da chave publica para o site do servidor git (ex.: github)
# Próximo passo será copiar o endereço da pasta no github. São duas possibilidades: um endereço para autenticação por ssh, outro por https.
# No caso do https voce precisara colocar seu usuario e senha quando realizar a conexao. É o caminho mais fácil (veja os comandos abaixo)
# Obs: pode haver dificuldades de conexao, em especial se a autenticacao em dois fatores estiver ativa.
# E possivel configurar um arquivo de credenciais, mas os detalhes nao estao nesse tutorial.
# No caso do ssh, voce ira usar o servico local configurado anteriormente. No primeiro acesso, ele questionara se confia o servidor, responda que sim
# Na sequencia seguir com as orientações de comando do git


--------------------- configurando o git -------------------

# você precisará de um executável de comandos git. É comum usar o git bash, mas você pode instalar o git do anaconda. Ele será como outro
# pacote qualquer, ou seja, só está habilitado no ambiente onde está instalado. 
# Nesse tutorial esse comando foi realizado no set do ambiente
# conda install -c anaconda git
# você pode ter que configurar suas informações de acesso
git config user.email "seu@email.com"
git config user.name  "seu nome"
# esse config so e aplicavel ao contexto desse git. se quiser configurar essas variaveis para todos os repositorios git, 
# utilizar a opcao --global. Nao recomendado

# são dois caminhos: (1) voce pode criar o projeto no github e clonar para uma pasta local; (2) pode criar uma pasta local
# clonar e, em geral, o caminho mais facil


# para criar localmente GIT: 
git init 
git add README.md
git commit -m 'first commit'
git remote add origin 'path ssh' [path criado no github]
# Gitflow: analisa o status, valida as diferencas entre as versoes, adiciona os arquivos validados, faz o commit com descricao 
# da alteracao e envia para o repositorio remoto



# Identifique o historico de alteracoes
git log
# Identifique as alteracoes disponiveis
git status


# Identifique as diferencas
git diff [arquivo]

# Adicione as alterações para commit (se colocar '.', todos os arquivos serão adicionados. Para selecionar quais arquivos dar commit, escreva o nome)
git add .
# Marque as alterações para subir incluindo uma msg 
git commit -m '1a carga'
# remote e o nome padrao do servidor de origem (origin). branches sao versoes do projeto, sendo a master a principal.
# Faça a carga para o servidor
git push origin master
# Em um comando git push vc passa o nome do servidor remoto (ex.: origin) e o nome da branch que esta carregando (ex.: master)
# Voce pode dar o push para um ambiente de testes da versao final (git push test master) ou de uma versao parcial (git push test parcial)
# Para trazer para a máquina local as alteracoes que estao no servidor sem verificar diferencas (assume remote sem impacto local)
git pull origin master
# Para trazer para a máquina local as alteracoes que estao no servidor, sem alterar os arquivos locais
git fetch origin
# Para verificar as diferencas entre o que esta no servidor e o que esta local
git diff origin/master

# Voce pode navegar pelo historico do git atraves do checkout. Ele serve para ir para um determinado estagio do historico ou 
# para ir para algum ramo (branch). Se o ramo nao existir, ele cria automaticamente e ativa. Um ramo e o equivalente do ambiente 
# do conda: ele preserva os arquivos em um estado separado do que esta em outras branches. Porem, o git so gerencia os arquivos da 
# pasta git, enquanto o conda gerencia os arquivos da pasta do ambiente
# Ele representa um contexto geral do código. Quando criado, ele é um clone exato da branch em que você estava.
git checkout -b nome_nova_branch
# podem existir outros locais (sao varios origin, um para cada membro do projeto). Ate pode existir, conceitualmente mais de um master 
# (ex.: github e o servidor onde o serviço está rodando) e você pode dar push entre diferentes origins, mas não é o ideal.
# Como branches e origins são entidades distintas, você pode ter estágios de sincronias diferentes para cada branch.
# Para listar as branches do projeto
git branch
# Há diferentes formas de navegar pelo histórico. Antes de dar o commit
git restore --staged "nome_arquivo"
# Antes de se fazer o add, se analisa quais as diferenças existentes entre as versões dos arquivos.
git diff
# Para analisar apenas a diferença em um arquivo, incluir o nome do arquivo
# as vezes ocorre problemas com o print do git. use a opção --no-pager
git --no-pager log
# Para reverter a adição do arquivo
git restore --staged [nome_arquivo]
